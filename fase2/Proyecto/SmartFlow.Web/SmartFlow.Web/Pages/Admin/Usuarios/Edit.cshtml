using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using SmartFlow.Web.Data;
using SmartFlow.Web.Models;
using SmartFlow.Web.Helpers; // ✅ Importar para usar PasswordHelper
using System.Threading.Tasks;

namespace SmartFlow.Web.Pages.Admin.Usuarios
{
    public class EditModel : PageModel
    {
        private readonly SmartFlowContext _context;

        public EditModel(SmartFlowContext context)
        {
            _context = context;
        }

        [BindProperty]
        public Usuario Usuario { get; set; } = new Usuario();

        public SelectList RolesSelectList { get; set; }
        public SelectList CarrerasSelectList { get; set; }

        public async Task<IActionResult>
    OnGetAsync(int id)
    {
    Usuario = await _context.Usuarios.FindAsync(id);

    if (Usuario == null)
    {
    return NotFound();
    }

    RolesSelectList = new SelectList(new[]
    {
    new { Value = "Admin", Text = "Administrador" },
    new { Value = "Usuario", Text = "Usuario" }
    }, "Value", "Text", Usuario.Rol);

    CarrerasSelectList = new SelectList(_context.Set<Carrera>
        (), "Id", "Nombre", Usuario.CarreraId);

        return Page();
        }

        public async Task<IActionResult>
            OnPostAsync()
            {
            if (!ModelState.IsValid)
            {
            RolesSelectList = new SelectList(new[]
            {
            new { Value = "Admin", Text = "Administrador" },
            new { Value = "Usuario", Text = "Usuario" }
            }, "Value", "Text", Usuario.Rol);

            CarrerasSelectList = new SelectList(_context.Set<Carrera>
                (), "Id", "Nombre", Usuario.CarreraId);

                return Page();
                }

                // 🧩 Obtener el usuario actual de la BD
                var usuarioExistente = await _context.Usuarios.AsNoTracking().FirstOrDefaultAsync(u => u.Id == Usuario.Id);

                if (usuarioExistente == null)
                {
                return NotFound();
                }

                // 🔒 Si el campo Password fue modificado y no está vacío → cifrarlo
                if (!string.IsNullOrEmpty(Usuario.Password))
                {
                Usuario.Password = PasswordHelper.HashPassword(Usuario.Password);
                }
                else
                {
                // Mantener el hash anterior si no se cambió la contraseña
                Usuario.Password = usuarioExistente.Password;
                }

                _context.Attach(Usuario).State = EntityState.Modified;

                try
                {
                await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                if (!_context.Usuarios.Any(e => e.Id == Usuario.Id))
                {
                return NotFound();
                }
                else
                {
                throw;
                }
                }

                return RedirectToPage("./Index");
                }
                }
                }
