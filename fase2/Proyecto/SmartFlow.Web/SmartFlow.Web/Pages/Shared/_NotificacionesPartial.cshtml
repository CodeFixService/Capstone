@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor

@{
    var rol = HttpContextAccessor.HttpContext.Session.GetString("UsuarioRol");
}

<li class="nav-item dropdown">
    <a class="nav-link position-relative" data-bs-toggle="dropdown" href="#" onclick="cargarNotificaciones()">
        <i class="bi bi-bell"></i>
        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
            @ViewData["NotificacionesCount"]
        </span>
    </a>

    <ul class="dropdown-menu dropdown-menu-end shadow" style="width:350px;max-height:400px;overflow-y:auto;">
        <li><h6 class="dropdown-header">Notificaciones</h6></li>
        <li><div id="listaNotificaciones"></div></li>
        <li><hr class="dropdown-divider" /></li>

        @if (rol == "Admin")
        {
            <li>
                <a class="dropdown-item text-center fw-semibold" asp-page="/Admin/Notificaciones/Index">
                    Ver todas las notificaciones
                </a>
            </li>
        }
        else if (rol == "Usuario")
        {
            <li>
                <a class="dropdown-item text-center fw-semibold" asp-page="Usuario/Notificaciones/VerTodas">
                    Ver todas las notificaciones
                </a>
            </li>
        }
    </ul>
</li>
<script>
    async function cargarNotificaciones() {
        const baseUrl = window.location.origin;
        const rol = "@HttpContextAccessor.HttpContext.Session.GetString("UsuarioRol")";
        const url = `${baseUrl}/${rol}/Notificaciones?handler=Partial`;

        const response = await fetch(url, { cache: "no-store" });
        const html = await response.text();
        document.getElementById("listaNotificaciones").innerHTML = html;

        // 🔸 Reinicia contador cuando abre la campanita
        await fetch(`${baseUrl}/${rol}/Notificaciones?handler=Reset`);
        await actualizarContadorNotificaciones();
    }

    async function actualizarContadorNotificaciones() {
        try {
            const baseUrl = window.location.origin;
            const rol = "@HttpContextAccessor.HttpContext.Session.GetString("UsuarioRol")";
            const url = `${baseUrl}/${rol}/Notificaciones?handler=Count`;

            const response = await fetch(url, { cache: "no-store" });
            const data = await response.json();

            const badge = document.querySelector('.badge.rounded-pill.bg-danger');
            if (data.count > 0) {
                badge.textContent = data.count;
                badge.style.display = "inline-block";
            } else {
                badge.style.display = "none";
            }
        } catch (error) {
            console.error('Error al actualizar contador:', error);
        }
    }

    async function marcarLeidaYRedirigir(id, destino) {
        try {
            const baseUrl = window.location.origin;
            const rol = destino.includes('/Admin') ? 'Admin' : 'Usuario';
            const url = `${baseUrl}/${rol}/Notificaciones?handler=MarcarLeida&id=${id}`;
            const response = await fetch(url, { method: "GET", cache: "no-store" });
            const data = await response.json();

            if (data.ok) {
                await actualizarContadorNotificaciones();
                window.location.href = destino;
            } else {
                console.error("Error al marcar:", data.error);
                window.location.href = destino;
            }
        } catch (e) {
            console.error("Error JS:", e);
            window.location.href = destino;
        }
    }

    // 🔁 Actualizar contador cada 10 segundos
    setInterval(actualizarContadorNotificaciones, 10000);

    // 🚀 Ejecutar al cargar la página
    document.addEventListener("DOMContentLoaded", actualizarContadorNotificaciones);
</script>
