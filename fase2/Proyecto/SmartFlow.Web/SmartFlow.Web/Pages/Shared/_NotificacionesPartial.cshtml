@inject SmartFlow.Web.Data.SmartFlowContext _context
@using Microsoft.AspNetCore.Http
@using SmartFlow.Web.Models

@{
    var usuarioId = Context.Session.GetInt32("UsuarioId");
    var notificaciones = new List<Notificacion>();
    var pendientes = 0;
    var rol = Context.Session.GetString("UsuarioRol");


    if (rol == "Admin")
    {
        // 🔹 El administrador ve todas las notificaciones
        notificaciones = _context.Notificaciones
            .OrderByDescending(n => n.FechaCreacion)
            .ToList();
    }
    else if (usuarioId != null)
    {
        // 🔹 El usuario solo ve las suyas
        notificaciones = _context.Notificaciones
            .Where(n => n.UsuarioId == usuarioId)
            .OrderByDescending(n => n.FechaCreacion)
            .ToList();
    }

}

<div class="dropdown">
    <button id="btnCampanita"
            type="button"
            class="btn btn-link nav-link position-relative"
            data-bs-toggle="dropdown"
            data-bs-auto-close="outside"
            aria-expanded="false">

        <i class="bi bi-bell-fill" style="font-size:1.3rem;"></i>

        @if (pendientes > 0)
        {
            <span id="contadorNotificaciones"
                  class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                @pendientes
            </span>
        }
        else
        {
            <span id="contadorNotificaciones" class="visually-hidden">0</span>
        }
    </button>

    <ul id="listaNotificaciones"
        class="dropdown-menu dropdown-menu-end p-2"
        aria-labelledby="btnCampanita"
        style="min-width: 320px; max-height: 300px; overflow-y: auto; overflow-x: hidden; white-space: normal;">
        @if (notificaciones.Any())
        {
            @foreach (var n in notificaciones)
            {
                <li class="dropdown-item @(n.Leida ? "text-muted" : "fw-bold") noti-item"
                    data-url="/Usuario/Notificaciones"
                    style="cursor: pointer;">
                    <div>@n.Titulo</div>
                    <small>@n.Mensaje</small>
                </li>
            }

            <!-- 🔹 Línea separadora -->
            <li><hr class="dropdown-divider" /></li>

            <!-- 🔹 Enlace para ver todas -->
            <li>
                <a class="dropdown-item text-center text-primary fw-bold" href="/Usuario/Notificaciones">
                    Ver todas las notificaciones →
                </a>
            </li>
        }
        else
        {
            <li class="dropdown-item text-muted">No hay notificaciones</li>
        }
    </ul>
</div>

<input type="hidden" id="UsuarioIdOculto" value="@(usuarioId ?? 0)" />

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const dropdownEl = document.getElementById("btnCampanita");
        const usuarioId = document.getElementById("UsuarioIdOculto")?.value;

        if (!dropdownEl || !usuarioId) return;

        // Cuando se ABRE el dropdown, marcamos como leídas
        dropdownEl.addEventListener('show.bs.dropdown', function () {
            fetch('/Notificaciones?handler=MarcarLeidas', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `usuarioId=${usuarioId}`
            })
            .then(r => r.json())
            .then(({ success }) => {
                if (success) {
                    const badge = document.getElementById('contadorNotificaciones');
                    if (badge) {
                        // oculta el badge si era > 0
                        badge.classList.add('visually-hidden');
                    }
                    // pasa visualmente a "leídas"
                    document.querySelectorAll('#listaNotificaciones li').forEach(li => {
                        li.classList.remove('fw-bold');
                        li.classList.add('text-muted');
                    });
                }
            });
        });
    });
</script>
<script>
    /* 🔁 REFRESCO AUTOMÁTICO DEL CONTADOR CADA 10s (sin tocar nada más) */
    (function () {
        const usuarioId = document.getElementById('UsuarioIdOculto')?.value;
        const badge = document.getElementById('contadorNotificaciones');
        if (!usuarioId || !badge) return;

        function refreshCount() {
            fetch(`/Notificaciones?handler=Count&usuarioId=${usuarioId}`)
                .then(r => r.json())
                .then(({ count }) => {
                    if (typeof count !== 'number') return;

                    if (count > 0) {
                        badge.classList.remove('visually-hidden');
                        badge.textContent = count;
                    } else {
                        badge.textContent = '0';
                        badge.classList.add('visually-hidden');
                    }
                })
                .catch(() => { /* silencio para no romper UI */ });
        }

        // Actualiza de inmediato y luego cada 10 segundos
        refreshCount();
        window.__sfNotifInterval && clearInterval(window.__sfNotifInterval);
        window.__sfNotifInterval = setInterval(refreshCount, 10000);
    })();
</script>
<script>
    // 👇 Redirige a la página completa al hacer clic en cualquier notificación
    document.addEventListener("DOMContentLoaded", function () {
        const notiItems = document.querySelectorAll(".noti-item");
        notiItems.forEach(item => {
            item.addEventListener("click", () => {
                const url = item.getAttribute("data-url");
                if (url) window.location.href = url;
            });
        });
    });
</script>

